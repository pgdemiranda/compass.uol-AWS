Etapa 1: Configurar Athena
- O bucket "pgdm-compass" será aproveitado do exercício anterior
- Exploramos localmente o arquivo nomes.csv utilizando um Jupyter Notebook e obtivemos:
    - Dimensão: 1825433 linhas e 4 colunas;
    - Nome das colunas: 'nome', 'sexo', 'total' e 'ano';
    - Tipos dos dados: nome object, sexo object, total int64 e ano int64.
- Criamos um diretório chamado "queries" no bucket, a ser usado pelo Athena. 
- Configuramos o O AWS Athena usará esta pasta para armazenar as consultas executadas, passando o endereço do bucket como "s3://pgdm-compass/queries".

Etapa 2: Criar um banco de dados
- No editor rodamos a query `CREATE DATABASE meubanco` e selecionamos o banco meubanco no campo Database.

```
CREATE EXTERNAL TABLE IF NOT EXISTS meubanco.nomes (
    nome STRING,
    sexo STRING,
    total INT,
    ano INT
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
WITH SERDEPROPERTIES (
     'serialization.format' = ',',
     'field.delim' = ',',
     'skip.header.line.count' = '1'
)
STORED AS TEXTFILE
LOCATION 's3://pgdm-compass/dados/';
```

- Definimos todos os campos no conjunto de dados e demos a eles um tipo apropriado.
Informamos ao Athena para usar o analisador LazySimpleSerDe CSV. Usamos esse analisador porque ele permite valores nulos para números. 
Ele não suporta valores entre aspas.
Informamos ao analisador que os campos são delimitados por vírgulas e que a primeira linha contém nomes de campos que podem ser ignorados. -> EU QUE TIVE QUE ADICIONAR ISSO!

- Teste os dados com a seguinte consulta, substituindo o nome dos campos, banco de dados e tabela pelos nomes que você criou anteriormente:
    - `select nome from nomedobanco.nomedatabela where ano = 1999 order by total limit 15;`
    - `select nome from meubanco.nomes where ano = 1999 order by total limit 15;`

- Crie uma consulta que lista os 3 nomes mais usados em cada década desde o 1950 até hoje:
```
with contagem as (
    select 
        nome,
        (floor(ano / 10) * 10) as decada,
        sum(total) as resultado
    from meubanco.nomes
    where ano >= 1950
    group by nome, (floor(ano / 10) * 10)
),
ranqueamento as (
    select
        nome,
        decada,
        resultado,
        row_number() over (partition by decada order by resultado desc) as posicao
    from contagem
)
select
    nome,
    decada,
    resultado as total
from ranqueamento
where posicao <= 3
order by decada, total desc;
```